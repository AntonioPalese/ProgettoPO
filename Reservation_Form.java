import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.sql.Date;
import java.util.Calendar;
import java.util.GregorianCalendar;

import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author jasmineguglielmi
 */
public class Reservation_Form extends javax.swing.JFrame {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	/**
	 * Creates new form ManageForm
	 */
	public Reservation_Form() {
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	
	// <editor-fold defaultstate="collapsed" desc="Generated Code">                          
	private void initComponents() {

		dateChooserDialog1 = new datechooser.beans.DateChooserDialog();
		jPanel1 = new javax.swing.JPanel();
		jLabel1 = new javax.swing.JLabel();
		jPanel2 = new javax.swing.JPanel();
		jLabel2 = new javax.swing.JLabel();
		jLabel3 = new javax.swing.JLabel();
		jLabel4 = new javax.swing.JLabel();
		jLabel5 = new javax.swing.JLabel();
		jLabel6 = new javax.swing.JLabel();
		jLabel7 = new javax.swing.JLabel();
		jTextFieldId = new javax.swing.JTextField();
		jTextFieldTotalRoomsBooked = new javax.swing.JTextField();
		jTextFieldGuestsName = new javax.swing.JTextField();
		jTextFieldGuestsSurname = new javax.swing.JTextField();
		dateChooserCheckout = new datechooser.beans.DateChooserCombo();
		dateChooserCheckin = new datechooser.beans.DateChooserCombo();
		jScrollPane1 = new javax.swing.JScrollPane();
		jTableReservation = new javax.swing.JTable();
		jLabel8 = new javax.swing.JLabel();
		jTextFieldRoomType = new javax.swing.JTextField();
		jButtonRefresh = new javax.swing.JButton();
		jButtonAddReservation = new javax.swing.JButton();
		jButtonEditReservation = new javax.swing.JButton();
		jButtonRemoveReservation = new javax.swing.JButton();
		jLabel9 = new javax.swing.JLabel();
		jTextFieldEmail = new javax.swing.JTextField();
		jTableReservation.addMouseListener(new MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable2MouseClicked(evt);
            }					
		});
		
		jPanel1.addMouseListener(new MouseListener() {		
			@Override
			public void mouseClicked(MouseEvent e) {
				// TODO Auto-generated method stub
				jTableReservation.clearSelection();
				jTextFieldId.setEditable(true);
				
			}

			@Override
			public void mousePressed(MouseEvent e) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void mouseReleased(MouseEvent e) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void mouseEntered(MouseEvent e) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void mouseExited(MouseEvent e) {
				// TODO Auto-generated method stub
				
			}
		});
		jPanel2.addMouseListener(new MouseListener() {		
			@Override
			public void mouseClicked(MouseEvent e) {
				// TODO Auto-generated method stub
				jTableReservation.clearSelection();
				jTextFieldId.setEditable(true);
				
			}

			@Override
			public void mousePressed(MouseEvent e) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void mouseReleased(MouseEvent e) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void mouseEntered(MouseEvent e) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void mouseExited(MouseEvent e) {
				// TODO Auto-generated method stub
				
			}
		});		
		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

		jPanel1.setBackground(new java.awt.Color(91, 34, 35));

		jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 36)); // NOI18N
		jLabel1.setForeground(new java.awt.Color(255, 255, 255));
		jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		jLabel1.setText("Bookings / Reservation");

		javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
		jPanel1.setLayout(jPanel1Layout);
		jPanel1Layout.setHorizontalGroup(
				jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanel1Layout.createSequentialGroup()
						.addGap(206, 206, 206)
						.addComponent(jLabel1)
						.addContainerGap(237, Short.MAX_VALUE))
				);
		jPanel1Layout.setVerticalGroup(
				jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanel1Layout.createSequentialGroup()
						.addGap(29, 29, 29)
						.addComponent(jLabel1)
						.addContainerGap(34, Short.MAX_VALUE))
				);

		jLabel2.setText("ID:");

		jLabel3.setText("Check-in:");

		jLabel4.setText("Check-out:");

		jLabel5.setText("Total rooms:");

		jLabel6.setText("Name:");

		jLabel7.setText("Surname:");

		dateChooserCheckout.setAutoScroll(false);
		dateChooserCheckout.setCalendarPreferredSize(new java.awt.Dimension(280, 300));
		dateChooserCheckout.setNothingAllowed(false);
		dateChooserCheckout.setWeekStyle(datechooser.view.WeekDaysStyle.SHORT);
		dateChooserCheckout.setFieldFont(new java.awt.Font("Lucida Grande", java.awt.Font.PLAIN, 14));
		dateChooserCheckout.setCurrentNavigateIndex(0);
		dateChooserCheckout.setBehavior(datechooser.model.multiple.MultyModelBehavior.SELECT_SINGLE);
		dateChooserCheckout.addCursorMoveListener(new datechooser.events.CursorMoveListener() {
			public void onCursorMove(datechooser.events.CursorMoveEvent evt) {
				dateChooserCheckoutOnCursorMove(evt);
			}
		});
		dateChooserCheckout.addSelectionChangedListener(new datechooser.events.SelectionChangedListener() {
			public void onSelectionChange(datechooser.events.SelectionChangedEvent evt) {
				dateChooserCheckoutOnSelectionChange(evt);
			}
		});
		dateChooserCheckout.addCommitListener(new datechooser.events.CommitListener() {
			public void onCommit(datechooser.events.CommitEvent evt) {
				dateChooserCheckoutOnCommit(evt);
			}
		});

		dateChooserCheckin.setCurrentView(new datechooser.view.appearance.AppearancesList("Swing",
				new datechooser.view.appearance.ViewAppearance("custom",
						new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Lucida Grande", java.awt.Font.PLAIN, 13),
								new java.awt.Color(0, 0, 0),
								new java.awt.Color(0, 0, 255),
								false,
								true,
								new datechooser.view.appearance.swing.ButtonPainter()),
						new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Lucida Grande", java.awt.Font.PLAIN, 13),
								new java.awt.Color(0, 0, 0),
								new java.awt.Color(0, 0, 255),
								true,
								true,
								new datechooser.view.appearance.swing.ButtonPainter()),
						new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Lucida Grande", java.awt.Font.PLAIN, 13),
								new java.awt.Color(0, 0, 255),
								new java.awt.Color(0, 0, 255),
								false,
								true,
								new datechooser.view.appearance.swing.ButtonPainter()),
						new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Lucida Grande", java.awt.Font.PLAIN, 13),
								new java.awt.Color(128, 128, 128),
								new java.awt.Color(0, 0, 255),
								false,
								true,
								new datechooser.view.appearance.swing.LabelPainter()),
						new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Lucida Grande", java.awt.Font.PLAIN, 13),
								new java.awt.Color(0, 0, 0),
								new java.awt.Color(0, 0, 255),
								false,
								true,
								new datechooser.view.appearance.swing.LabelPainter()),
						new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Lucida Grande", java.awt.Font.PLAIN, 13),
								new java.awt.Color(0, 0, 0),
								new java.awt.Color(255, 0, 0),
								false,
								false,
								new datechooser.view.appearance.swing.ButtonPainter()),
						(datechooser.view.BackRenderer)null,
						false,
						true)));
		dateChooserCheckin.setAutoScroll(false);
		dateChooserCheckin.setCalendarPreferredSize(new java.awt.Dimension(280, 300));
		dateChooserCheckin.setNothingAllowed(false);
		dateChooserCheckin.setWeekStyle(datechooser.view.WeekDaysStyle.SHORT);
		dateChooserCheckin.setFieldFont(new java.awt.Font("Lucida Grande", java.awt.Font.PLAIN, 14));
		dateChooserCheckin.setBehavior(datechooser.model.multiple.MultyModelBehavior.SELECT_SINGLE);
		dateChooserCheckin.addCursorMoveListener(new datechooser.events.CursorMoveListener() {
			public void onCursorMove(datechooser.events.CursorMoveEvent evt) {
				dateChooserCheckinOnCursorMove(evt);
			}
		});
		dateChooserCheckin.addSelectionChangedListener(new datechooser.events.SelectionChangedListener() {
			public void onSelectionChange(datechooser.events.SelectionChangedEvent evt) {
				dateChooserCheckinOnSelectionChange(evt);
			}
		});
		dateChooserCheckin.addCommitListener(new datechooser.events.CommitListener() {
			public void onCommit(datechooser.events.CommitEvent evt) {
				dateChooserCheckinOnCommit(evt);
			}
		});


		jTableReservation.setModel(new javax.swing.table.DefaultTableModel(
				new Object [][] {
				},
				new String [] {
						"ID", "Name", "Surname", "E-mail", "Check-in", "Check-out", "Type", "Total rooms"
				}
				) {
			/**
					 * 
					 */
					private static final long serialVersionUID = 1L;
			@SuppressWarnings("rawtypes")
			Class[] types = new Class [] {
					java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
			};
			boolean[] canEdit = new boolean [] {
					false, false, false, false, false, false, false, false
			};

			public Class<?> getColumnClass(int columnIndex) {
				return types [columnIndex];
			}

			public boolean isCellEditable(int rowIndex, int columnIndex) {
				return canEdit [columnIndex];
			}
		});
		jTableReservation.setFocusCycleRoot(true);
		jTableReservation.setOpaque(false);
		jTableReservation.setRequestFocusEnabled(false);
		jTableReservation.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
		jTableReservation.getTableHeader().setReorderingAllowed(false);
		jScrollPane1.setViewportView(jTableReservation);

		jLabel8.setText("Room Type:");

		jButtonRefresh.setBackground(new java.awt.Color(204, 255, 204));
		jButtonRefresh.setFont(new java.awt.Font("Lucida Grande", 1, 24)); // NOI18N
		jButtonRefresh.setForeground(new java.awt.Color(0, 153, 102));
		jButtonRefresh.setText("Refresh");
		jButtonRefresh.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButtonRefreshActionPerformed(evt);
			}
		});

		jButtonAddReservation.setText("Add new reservation");
		jButtonAddReservation.addActionListener(new ActionListener() {		
			@Override
			public void actionPerformed(ActionEvent evt) {
				// TODO Auto-generated method stub
				jButtonAddActionPerformed(evt);
			}		
		});

		jButtonEditReservation.setText("Edit");
		jButtonEditReservation.addActionListener(new ActionListener() {		
			@Override
			public void actionPerformed(ActionEvent evt) {
				jButtonEditActionPerformed(evt);
			}			
		});

		jButtonRemoveReservation.setBackground(new java.awt.Color(255, 102, 102));
		jButtonRemoveReservation.setForeground(new java.awt.Color(0 ,0 ,0));
		jButtonRemoveReservation.setText("Remove");
		jButtonRemoveReservation.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent evt) {
				JButtonRemoveActionPerformed(evt);
			}		
		});
		
		jLabel9.setText("Email:");
		javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
		jPanel2.setLayout(jPanel2Layout);
		jPanel2Layout.setHorizontalGroup(
		jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
		.addGroup(jPanel2Layout.createSequentialGroup()
		    .addGap(13, 13, 13)
		    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
			.addGroup(jPanel2Layout.createSequentialGroup()
			    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
				.addComponent(jLabel7)
				.addComponent(jLabel5)
				.addComponent(jLabel4)
				.addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
				.addComponent(jLabel2)
				.addComponent(jLabel6)
				.addComponent(jLabel8)
				.addComponent(jLabel9))
			    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
			    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
				.addComponent(dateChooserCheckin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
				.addComponent(dateChooserCheckout, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
				.addComponent(jTextFieldId)
				.addComponent(jTextFieldTotalRoomsBooked)
				.addComponent(jTextFieldGuestsName)
				.addComponent(jTextFieldGuestsSurname)
				.addComponent(jTextFieldRoomType)
				.addComponent(jTextFieldEmail)))
			.addComponent(jButtonAddReservation, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
			.addComponent(jButtonEditReservation, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
			.addComponent(jButtonRemoveReservation, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE))
		    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
		    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
			.addComponent(jScrollPane1)
			.addComponent(jButtonRefresh, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
		    .addGap(23, 23, 23))
	    );
			jPanel2Layout.setVerticalGroup(
		jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
		.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
		    .addContainerGap(29, Short.MAX_VALUE)
		    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
			.addGroup(jPanel2Layout.createSequentialGroup()
			    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
				.addComponent(jLabel2)
				.addComponent(jTextFieldId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
			    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
			    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
				.addComponent(jLabel3)
				.addComponent(dateChooserCheckin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
			    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
			    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
				.addComponent(jLabel4)
				.addComponent(dateChooserCheckout, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
			    .addGap(16, 16, 16)
			    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
				.addComponent(jLabel5)
				.addComponent(jTextFieldTotalRoomsBooked, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
			    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
			    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
				.addComponent(jLabel6)
				.addComponent(jTextFieldGuestsName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
			    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
			    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
				.addComponent(jLabel7)
				.addComponent(jTextFieldGuestsSurname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
			    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
			    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
				.addComponent(jLabel8)
				.addComponent(jTextFieldRoomType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
			    .addGap(12, 12, 12)
			    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
				.addComponent(jLabel9)
				.addComponent(jTextFieldEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
			    .addGap(18, 18, 18)
			    .addComponent(jButtonAddReservation)
			    .addGap(18, 18, 18)
			    .addComponent(jButtonEditReservation)
			    .addGap(18, 18, 18)
			    .addComponent(jButtonRemoveReservation))
			.addGroup(jPanel2Layout.createSequentialGroup()
			    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
			    .addGap(18, 18, 18)
			    .addComponent(jButtonRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)))
		    .addGap(13, 13, 13))
	    );

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
						.addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addGap(0, 0, Short.MAX_VALUE))
				.addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
				);
		layout.setVerticalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
						.addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
				);

		pack();
		rs.fillReservationJTable(jTableReservation);
	}// </editor-fold>             
	private void jTable2MouseClicked(MouseEvent evt) {
		// TODO Auto-generated method stub
		jTextFieldId.setEditable(false);
		DefaultTableModel def = (DefaultTableModel)jTableReservation.getModel();
		//System.out.println((boolean)def.getValueAt(jTableReservation.getSelectedRow(), 4));
  
        jTextFieldId.setText(def.getValueAt(jTableReservation.getSelectedRow(), 0).toString());
        jTextFieldGuestsName.setText((String) def.getValueAt(jTableReservation.getSelectedRow(), 1));
        jTextFieldGuestsSurname.setText((String)def.getValueAt(jTableReservation.getSelectedRow(), 2));
        jTextFieldEmail.setText((String)def.getValueAt(jTableReservation.getSelectedRow(), 3));
        dateChooserCheckin.setText((String)def.getValueAt(jTableReservation.getSelectedRow(), 4));
        dateChooserCheckout.setText((String)def.getValueAt(jTableReservation.getSelectedRow(), 5));
        jTextFieldRoomType.setText((String)def.getValueAt(jTableReservation.getSelectedRow(), 6));
        jTextFieldTotalRoomsBooked.setText(def.getValueAt(jTableReservation.getSelectedRow(), 7).toString());
	}	

	private void dateChooserCheckinOnSelectionChange(datechooser.events.SelectionChangedEvent evt) {                                                     
		// TODO add your handling code here:
	}                                                    

	private void dateChooserCheckoutOnSelectionChange(datechooser.events.SelectionChangedEvent evt) {                                                      
		// TODO add your handling code here:
	}                                                     

	private void dateChooserCheckinOnCursorMove(datechooser.events.CursorMoveEvent evt) {                                                
		// TODO add your handling code here:
	}                                               

	private void dateChooserCheckinOnCommit(datechooser.events.CommitEvent evt) {                                            
		// TODO add your handling code here:
	}                                           

	private void jButtonRefreshActionPerformed(java.awt.event.ActionEvent evt) {                                               
		// TODO add your handling code here:
		//rs.fillReservationJTable(jTableReservation);
		jTextFieldId.setEditable(true);
		DefaultTableModel def = (DefaultTableModel)jTableReservation.getModel();
		//System.out.println("numero righe" + def.getRowCount());
		int n = def.getRowCount();
		for(int i = 0; i < n; i++)    		
			def.removeRow(0);
		rs.fillReservationJTable(jTableReservation);      	

	}                                              

	@SuppressWarnings("deprecation")
	private void jButtonAddActionPerformed(ActionEvent evt) {
		// TODO Auto-generated method stub
		String[] str = dateChooserCheckin.getText().split("/");	
		String[] str2 = dateChooserCheckout.getText().split("/");
		Date datein = new Date(Integer.parseInt(str[2]) + 2000 - 1900, Integer.parseInt(str[1]) - 1, Integer.parseInt(str[0]) + 1);
		Date dateout = new Date(Integer.parseInt(str2[2]) + 2000 - 1900, Integer.parseInt(str2[1]) - 1,Integer.parseInt(str2[0]) + 1);
		GregorianCalendar gc = new GregorianCalendar();
		Date today = new Date(gc.get(Calendar.YEAR) - 1900, gc.get(Calendar.MONTH), gc.get(Calendar.DAY_OF_MONTH) + 1);
		if (jTextFieldId.getText().trim().isEmpty()) 
			JOptionPane.showMessageDialog(this, "Compulsory field \"ID\"");
		else if (datein.after(dateout) || datein.before(today) || dateout.before(today) || datein.equals(dateout)) {
			System.out.println("errore data");
			JOptionPane.showMessageDialog(this, "check in/check out insertion error");
		}
		else if (jTextFieldTotalRoomsBooked.getText().trim().isEmpty())
			JOptionPane.showMessageDialog(this, "Compulsory field \"Total Rooms\"");				
		else if (jTextFieldGuestsName.getText().trim().isEmpty())
			JOptionPane.showMessageDialog(this, "Compulsory field \"First Name\"");
		else if (jTextFieldGuestsSurname.getText().trim().isEmpty())
			JOptionPane.showMessageDialog(this, "Compulsory field \"Last Name\"");
		else if (jTextFieldRoomType.getText().trim().isEmpty())
			JOptionPane.showMessageDialog(this, "Compulsory field \"Type\"");		
		else if (jTextFieldEmail.getText().trim().isEmpty())
		 	JOptionPane.showMessageDialog(this, "Compulsory field \"E-mail\""); 
		else {
			rs.setId(Integer.parseInt(jTextFieldId.getText()));
			rs.setCheck_in(new Date(Integer.parseInt(str[2]) + 2000 - 1900, Integer.parseInt(str[1]) - 1,Integer.parseInt(str[0]) + 1));
			rs.setCheck_out(new Date(Integer.parseInt(str2[2]) + 2000 - 1900, Integer.parseInt(str2[1]) - 1,Integer.parseInt(str2[0]) + 1));
			rs.setName(jTextFieldGuestsName.getText());
			rs.setSurname(jTextFieldGuestsSurname.getText());
			rs.setRoom_type(jTextFieldRoomType.getText());
			rs.setE_mail(jTextFieldEmail.getText());
			//rs.setE_mail("tiscali");
			rs.setTotal_rooms(Integer.parseInt(jTextFieldTotalRoomsBooked.getText()));			
			if(rs.addReservation(this, false)) {
				JOptionPane.showMessageDialog(this, "Operation Success", "Information Panel", JOptionPane.INFORMATION_MESSAGE);
			}
			/*
			 * else JOptionPane.showMessageDialog(this, "Operation Error", "Error Panel",
			 * JOptionPane.ERROR_MESSAGE);
			 */
		}
	}
		@SuppressWarnings("deprecation")
		private void jButtonEditActionPerformed(ActionEvent evt) {
			// TODO Auto-generated method stub
			String[] str = dateChooserCheckin.getText().split("/");	
			String[] str2 = dateChooserCheckout.getText().split("/");
			Date datein = new Date((Integer.parseInt(str[2]) + 2000) - 1900, Integer.parseInt(str[1]) - 1, Integer.parseInt(str[0]) + 1);
			Date dateout = new Date(Integer.parseInt(str2[2]) + 2000 - 1900, Integer.parseInt(str2[1]) - 1,Integer.parseInt(str2[0]) + 1);
			System.out.println(datein.before(dateout));
			GregorianCalendar gc = new GregorianCalendar();
			Date today = new Date(gc.get(Calendar.YEAR) - 1900, gc.get(Calendar.MONTH), gc.get(Calendar.DAY_OF_MONTH) + 1);
			System.out.println("date in "+ datein);
			System.out.println("today" + today);
			System.out.println("date in before today ? " + datein.before(today));
			if (jTextFieldId.getText().trim().isEmpty()) 
				JOptionPane.showMessageDialog(this, "Compulsory field \"ID\"");
			else if (datein.after(dateout) || datein.before(today) || dateout.before(today) || datein.equals(dateout)) {
				System.out.println("errore data"); 
				JOptionPane.showMessageDialog(this, "check in/check out insertion error");
			}			
			else if (jTextFieldTotalRoomsBooked.getText().trim().isEmpty())
				JOptionPane.showMessageDialog(this, "Compulsory field \"Total Rooms\"");				
			else if (jTextFieldGuestsName.getText().trim().isEmpty())
				JOptionPane.showMessageDialog(this, "Compulsory field \"First Name\"");
			else if (jTextFieldGuestsSurname.getText().trim().isEmpty())
				JOptionPane.showMessageDialog(this, "Compulsory field \"Last Name\"");
			else if (jTextFieldRoomType.getText().trim().isEmpty())
				JOptionPane.showMessageDialog(this, "Compulsory field \"Type\"");		
			else if (jTextFieldEmail.getText().trim().isEmpty())
			 	JOptionPane.showMessageDialog(this, "Campo \"E-mail\" obbligatorio");
			else {
				rs.setId(Integer.parseInt(jTextFieldId.getText()));
				rs.setCheck_in(new Date(Integer.parseInt(str[2]) + 2000 - 1900, Integer.parseInt(str[1]) - 1,Integer.parseInt(str[0]) + 1));
				rs.setCheck_out(new Date(Integer.parseInt(str2[2]) + 2000 - 1900, Integer.parseInt(str2[1]) - 1,Integer.parseInt(str2[0]) + 1));
				rs.setName(jTextFieldGuestsName.getText());
				rs.setSurname(jTextFieldGuestsSurname.getText());
				rs.setRoom_type(jTextFieldRoomType.getText());
				rs.setE_mail(jTextFieldEmail.getText());
				//rs.setE_mail("live");
				rs.setTotal_rooms(Integer.parseInt(jTextFieldTotalRoomsBooked.getText()));			
				if(rs.editReservation(this)) {
					JOptionPane.showMessageDialog(this, "Operation Success", "Information Panel", JOptionPane.INFORMATION_MESSAGE);
				}
			/*
			 * else JOptionPane.showMessageDialog(this, "Operation Error", "Error Panel",
			 * JOptionPane.ERROR_MESSAGE);
			 */
		}


		/*
		 * rs.setRoom_type(jTextFieldRoomType.getText()); String[] str =
		 * dateChooserCheckin.getText().split("/"); String[] str2 =
		 * dateChooserCheckout.getText().split("/"); System.out.println(str[0] + str[1]
		 * + str[2]); System.out.println(Integer.parseInt(str[1])); rs.setCheck_in(new
		 * Date(Integer.parseInt(str[2]) + 2000 - 1900, Integer.parseInt(str[1]) -
		 * 1,Integer.parseInt(str[0]) + 1)); rs.setCheck_out(new
		 * Date(Integer.parseInt(str2[2]) + 2000 - 1900, Integer.parseInt(str2[1]) -
		 * 1,Integer.parseInt(str2[0]) + 1)); rs.setId(41);
		 * 
		 * @SuppressWarnings("deprecation") Date datein = new
		 * Date(Integer.parseInt(str[2]) + 2000 - 1900, Integer.parseInt(str[1]) - 1,
		 * Integer.parseInt(str[0]) + 1); Date dateout = new
		 * Date(Integer.parseInt(str2[2]) + 2000 - 1900, Integer.parseInt(str2[1]) -
		 * 1,Integer.parseInt(str2[0]) + 1); System.out.println(datein.before(dateout));
		 * if (datein.after(dateout)) System.out.println("errore data");
		 * rs.setName("Antonio"); rs.setSurname("Gabusi"); rs.setRoom_type("Single");
		 * rs.setTotal_rooms(1); rs.setE_mail("live"); rs.addReservation();
		 */
	}
		
	private void JButtonRemoveActionPerformed(ActionEvent evt) {
		if (jTextFieldId.getText().trim().isEmpty()) 
			JOptionPane.showMessageDialog(this, "Compulsory field \"ID\"");
		else {
			rs.setId(Integer.parseInt(jTextFieldId.getText()));
			if(rs.removeReservation()) {
				JOptionPane.showMessageDialog(this, "Operation Success", "Information Panel", JOptionPane.INFORMATION_MESSAGE);
			}
			else
				JOptionPane.showMessageDialog(this, "Operation Error", "Error Panel", JOptionPane.ERROR_MESSAGE);
		}
		    
		
	}

	private void dateChooserCheckoutOnCursorMove(datechooser.events.CursorMoveEvent evt) {                                                 
		// TODO add your handling code here:
	}                                                

	private void dateChooserCheckoutOnCommit(datechooser.events.CommitEvent evt) {                                             
		// TODO add your handling code here:
	}                                            


	// Variables declaration - do not modify      
	private Reservation rs = new Reservation();
	private datechooser.beans.DateChooserCombo dateChooserCheckin;
	private datechooser.beans.DateChooserCombo dateChooserCheckout;
	@SuppressWarnings("unused")
	private datechooser.beans.DateChooserDialog dateChooserDialog1;
	private javax.swing.JButton jButtonAddReservation;
	private javax.swing.JButton jButtonEditReservation;
	private javax.swing.JButton jButtonRefresh;
	private javax.swing.JButton jButtonRemoveReservation;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JLabel jLabel4;
	private javax.swing.JLabel jLabel5;
	private javax.swing.JLabel jLabel6;
	private javax.swing.JLabel jLabel7;
	private javax.swing.JLabel jLabel8;
	private javax.swing.JLabel jLabel9;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JPanel jPanel2;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JTable jTableReservation;
	private javax.swing.JTextField jTextFieldGuestsName;
	private javax.swing.JTextField jTextFieldGuestsSurname;
	private javax.swing.JTextField jTextFieldId;
	private javax.swing.JTextField jTextFieldEmail;
	private javax.swing.JTextField jTextFieldRoomType;
	private javax.swing.JTextField jTextFieldTotalRoomsBooked;
	// End of variables declaration                   
}